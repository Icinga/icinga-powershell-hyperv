object CheckCommand "Invoke-IcingaCheckHyperVVMHealth" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaPluginNotInstalled 'Invoke-IcingaCheckHyperVVMHealth'; exit Invoke-IcingaCheckHyperVVMHealth"
            order = 0
        }
        "-NegateVMState" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckHyperVVMHealth_Object_Verbosity$"
            order = 5
        }
        "-VmEnabledState" = {
            description = "Critical threshold for the Hyper-V VM current status"
            value = "$IcingaCheckHyperVVMHealth_Object_VmEnabledState$"
            order = 4
        }
        "-SkipVMHeartbeat" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat$"
            order = 99
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMHealth_Array_ExcludeVms$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 3
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMHealth_Array_IncludeVms$");
                if (len(arr) == 0) {
                return "@()";
                }
                return arr.join(",");
            }}
            order = 2
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat = false
}
