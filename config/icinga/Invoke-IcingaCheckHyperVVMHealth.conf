object CheckCommand "Invoke-IcingaCheckHyperVVMHealth" {
    import "PowerShell Base"

    arguments += {
        "-VmEnabledState" = {
            description = "Critical threshold for the Hyper-V VM current status"
            value = "$IcingaCheckHyperVVMHealth_Object_VmEnabledState$"
            order = 7
        }
        "-NegateVMState" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState$"
            order = 99
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVMHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVVMHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVVMHealth_Object_Verbosity$"
            order = 8
        }
        "-CriticalActiveVms" = {
            description = "Allows to monitor on how many active VM's are currently present and throws a warning in case it is within the threshold"
            value = "$IcingaCheckHyperVVMHealth_Object_CriticalActiveVms$"
            order = 5
        }
        "-SkipVMHeartbeat" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat$"
            order = 99
        }
        "-BlackoutTimesEventDelta" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVMHealth_String_BlackoutTimesEventDelta$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Defines a time range (example '-5d') to filter for any BlackoutTime log entries older than the provided time range. In case a warning BlackoutTime is triggered and older than the provided threshold, the value is printed with an 'OK' state instead of 'WARNING'"
            value = {{
                var str = macro("$IcingaCheckHyperVVMHealth_String_BlackoutTimesEventDelta$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 6
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMHealth_Array_ExcludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-WarningActiveVms" = {
            description = "Allows to monitor on how many active VM's are currently present and throws a warning in case it is within the threshold"
            value = "$IcingaCheckHyperVVMHealth_Object_WarningActiveVms$"
            order = 4
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMHealth_Array_IncludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms$"
            order = 99
        }
    }
    vars.ifw_api_arguments = {
        "SkipVMHeartbeat" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVVMHealth_String_ThresholdInterval$"
        }
        "ExcludeVms" = {
            value = "$IcingaCheckHyperVVMHealth_Array_ExcludeVms$"
        }
        "ActiveVms" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms$"
        }
        "CriticalActiveVms" = {
            value = "$IcingaCheckHyperVVMHealth_Object_CriticalActiveVms$"
        }
        "NegateVMState" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState$"
        }
        "VmEnabledState" = {
            value = "$IcingaCheckHyperVVMHealth_Object_VmEnabledState$"
        }
        "BlackoutTimesEventDelta" = {
            value = "$IcingaCheckHyperVVMHealth_String_BlackoutTimesEventDelta$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData$"
        }
        "IncludeVms" = {
            value = "$IcingaCheckHyperVVMHealth_Array_IncludeVms$"
        }
        "WarningActiveVms" = {
            value = "$IcingaCheckHyperVVMHealth_Object_WarningActiveVms$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVVMHealth_Object_Verbosity$"
        }
    }
    vars.IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat = false
    vars.ifw_api_command = "invoke-icingacheckhypervvmhealth"
    vars.IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState = false
}
