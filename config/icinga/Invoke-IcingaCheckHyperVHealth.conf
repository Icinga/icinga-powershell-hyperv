object CheckCommand "Invoke-IcingaCheckHyperVHealth" {
    import "PowerShell Base"

    arguments += {
        "-NodeCountWarning" = {
            description = "Allows to throw warning in case the Hyper-V cluster node count is not matching this threshold"
            value = "$IcingaCheckHyperVHealth_Object_NodeCountWarning$"
            order = 2
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVHealth_Object_Verbosity$"
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-NodeCountCritical" = {
            description = "Allows to throw critical in case the Hyper-V cluster node count is not matching this threshold"
            value = "$IcingaCheckHyperVHealth_Object_NodeCountCritical$"
            order = 3
        }
    }
    vars.ifw_api_arguments = {
        "Verbosity" = {
            value = "$IcingaCheckHyperVHealth_Object_Verbosity$"
        }
        "NodeCountCritical" = {
            value = "$IcingaCheckHyperVHealth_Object_NodeCountCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVHealth_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVHealth_Switchparameter_NoPerfData$"
        }
        "NodeCountWarning" = {
            value = "$IcingaCheckHyperVHealth_Object_NodeCountWarning$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckhypervhealth"
    vars.IcingaCheckHyperVHealth_Switchparameter_NoPerfData = false
}
