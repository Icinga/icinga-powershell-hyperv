object CheckCommand "Invoke-IcingaCheckHyperVVirtualSwitches" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVVirtualSwitches' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVVirtualSwitches_Object_Verbosity$"
            order = 6
        }
        "-Include" = {
            description = "With this parameter you can filter virtual switches for the check in. e.g. testswitch1, testswitch1."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Include$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 2
        }
        "-ThresholdValue" = {
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = "$IcingaCheckHyperVVirtualSwitches_String_ThresholdValue$"
            order = 100
        }
        "-Internal" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_Internal$"
            order = 99
        }
        "-Warning" = {
            description = "Warning threshold for Switch Status indicates that an element is functioning properly, but is predicating a failure."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Warning$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 4
        }
        "-Critical" = {
            description = "Critical threshold for Switch Status indicates that an element is functioning properly, but is predicating a failure."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Critical$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Exclude" = {
            description = "With this parameter you can filter out virtual switches for the check. e.g. testswitch1, testswitch1."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Exclude$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 3
        }
        "-External" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_External$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_Internal = false
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_External = false
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_NoPerfData = false
}
