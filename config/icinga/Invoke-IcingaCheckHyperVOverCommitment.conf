object CheckCommand "Invoke-IcingaCheckHyperVOverCommitment" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVOverCommitment_Object_Verbosity$"
            order = 16
        }
        "-RAMOCPercentWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V average RAM overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentWarn$"
            order = 10
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_ActiveVms$"
            order = 99
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVOverCommitment_Array_IncludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-RAMOCByteCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V RAM overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteCrit$"
            order = 9
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVOverCommitment_Array_ExcludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-StorageOCByteCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V Storage overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteCrit$"
            order = 13
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVOverCommitment_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/110-Installation/06-Collect-Metrics-over-Time/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVOverCommitment_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-StorageOCPercentWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V average Storage overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentWarn$"
            order = 14
        }
        "-RAMOCByteWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V RAM overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteWarn$"
            order = 8
        }
        "-StorageOCPercentCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V average Storage overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentCrit$"
            order = 15
        }
        "-StorageOCByteWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V Storage overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteWarn$"
            order = 12
        }
        "-CPUOCPercentWarn" = {
            description = "Warning threshold for Hyper-V average CPU overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentWarn$"
            order = 6
        }
        "-CPUCoreOCWarn" = {
            description = "Warning threshold for Hyper-V CPU Cores overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCWarn$"
            order = 4
        }
        "-CPUOCPercentCrit" = {
            description = "Critical threshold for Hyper-V average CPU overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentCrit$"
            order = 7
        }
        "-CPUCoreOCCrit" = {
            description = "Critical threshold for Hyper-V CPU Cores overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCCrit$"
            order = 5
        }
        "-RAMOCPercentCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V average RAM overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentCrit$"
            order = 11
        }
    }
    vars.IcingaCheckHyperVOverCommitment_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "RAMOCPercentCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentCrit$"
        }
        "RAMOCByteCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteCrit$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVOverCommitment_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_NoPerfData$"
        }
        "RAMOCPercentWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentWarn$"
        }
        "CPUCoreOCWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCWarn$"
        }
        "ActiveVms" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_ActiveVms$"
        }
        "StorageOCByteCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteCrit$"
        }
        "RAMOCByteWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteWarn$"
        }
        "CPUOCPercentCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentCrit$"
        }
        "StorageOCByteWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteWarn$"
        }
        "ExcludeVms" = {
            value = "$IcingaCheckHyperVOverCommitment_Array_ExcludeVms$"
        }
        "IncludeVms" = {
            value = "$IcingaCheckHyperVOverCommitment_Array_IncludeVms$"
        }
        "CPUCoreOCCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCCrit$"
        }
        "CPUOCPercentWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentWarn$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_Verbosity$"
        }
        "StorageOCPercentCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentCrit$"
        }
        "StorageOCPercentWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentWarn$"
        }
    }
    vars.ifw_api_command = "invoke-icingacheckhypervovercommitment"
    vars.IcingaCheckHyperVOverCommitment_Switchparameter_ActiveVms = false
}
