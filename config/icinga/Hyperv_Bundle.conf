object CheckCommand "Invoke-IcingaCheckHyperVHealth" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVHealth' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVHealth_Object_Verbosity$"
            order = 2
        }
    }
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVHealth_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVHealth_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVHealth_Object_Verbosity$"
        }
    }
    vars.IcingaCheckHyperVHealth_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckHyperVDuplicateVM" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVDuplicateVM' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVDuplicateVM_Object_Verbosity$"
            order = 4
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVDuplicateVM_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVDuplicateVM_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVDuplicateVM_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ExcludeVMs" = {
            description = "Allows to filter for virtual machines to never check for them and always being dropped"
            value = {{
                var arr = macro("$IcingaCheckHyperVDuplicateVM_Array_ExcludeVMs$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-IncludeVMs" = {
            description = "Allows to filter for virtual machines which are included in the check. All others are dropped"
            value = {{
                var arr = macro("$IcingaCheckHyperVDuplicateVM_Array_IncludeVMs$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
    }
    vars.ifw_api_arguments = {
        "IncludeVMs" = {
            value = "$IcingaCheckHyperVDuplicateVM_Array_IncludeVMs$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVDuplicateVM_Object_Verbosity$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVDuplicateVM_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVDuplicateVM_Switchparameter_NoPerfData$"
        }
        "ExcludeVMs" = {
            value = "$IcingaCheckHyperVDuplicateVM_Array_ExcludeVMs$"
        }
    }
    vars.IcingaCheckHyperVDuplicateVM_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckHyperVVirtualSwitches" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVVirtualSwitches' "
            order = 0
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVVirtualSwitches_Object_Verbosity$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVirtualSwitches_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVVirtualSwitches_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_AvoidEmptyCheck$"
            order = 99
        }
        "-Internal" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_Internal$"
            order = 99
        }
        "-Include" = {
            description = "With this parameter you can filter virtual switches for the check in. e.g. testswitch1, testswitch1."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Include$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-Warning" = {
            description = "Warning threshold for Switch Status indicates that an element is functioning properly, but is predicating a failure."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Warning$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 4
        }
        "-Critical" = {
            description = "Critical threshold for Switch Status indicates that an element is functioning properly, but is predicating a failure."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Critical$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_NoPerfData$"
            order = 99
        }
        "-Exclude" = {
            description = "With this parameter you can filter out virtual switches for the check. e.g. testswitch1, testswitch1."
            value = {{
                var arr = macro("$IcingaCheckHyperVVirtualSwitches_Array_Exclude$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-External" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_External$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_Internal = false
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_AvoidEmptyCheck = false
    vars.ifw_api_arguments = {
        "Internal" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_Internal$"
        }
        "AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_AvoidEmptyCheck$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVVirtualSwitches_String_ThresholdInterval$"
        }
        "Warning" = {
            value = "$IcingaCheckHyperVVirtualSwitches_Array_Warning$"
        }
        "Critical" = {
            value = "$IcingaCheckHyperVVirtualSwitches_Array_Critical$"
        }
        "Exclude" = {
            value = "$IcingaCheckHyperVVirtualSwitches_Array_Exclude$"
        }
        "External" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_External$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVVirtualSwitches_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVVirtualSwitches_Object_Verbosity$"
        }
        "Include" = {
            value = "$IcingaCheckHyperVVirtualSwitches_Array_Include$"
        }
    }
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_External = false
    vars.IcingaCheckHyperVVirtualSwitches_Switchparameter_NoPerfData = false
}

object CheckCommand "Invoke-IcingaCheckHyperVSnapshot" {
    import "PowerShell Base"

    arguments += {
        "-SnapshotSizePredictionWarning" = {
            description = "Warning threshold for predicting the size of snapshots taken for each Vm before the partition becomes full."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionWarning$"
            order = 12
        }
        "-SnapshotSizePredictionCritical" = {
            description = "Critical threshold for predicting the size of snapshots taken for each Vm before the partition becomes full."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionCritical$"
            order = 13
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms$"
            order = 99
        }
        "-CountSnapshotCritical" = {
            description = "Critical threshold for each individual vms how many snapshots they may have"
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotCritical$"
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVSnapshot_Array_IncludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVSnapshot_Array_ExcludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVSnapshot' "
            order = 0
        }
        "-SnapshotSizeWarning" = {
            description = "Warning threshold for each individual vms snapshot size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeWarning$"
            order = 10
        }
        "-SnapshotSizeCritical" = {
            description = "Critical threshold for each individual vms snapshot size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeCritical$"
            order = 11
        }
        "-CreationTimeWarning" = {
            description = "Warning threshold for each individual vms snapshots, how old they must be in seconds."
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeWarning$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVSnapshot_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVSnapshot_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-CountSnapshotWarning" = {
            description = "Warning threshold for each individual vms how many snapshots they may have."
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotWarning$"
            order = 4
        }
        "-TotalSnapshotSizeWarning" = {
            description = "Warning threshold for each individual vms total snapshots size. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeWarning$"
            order = 8
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVSnapshot_Object_Verbosity$"
            order = 14
        }
        "-TotalSnapshotSizeCritical" = {
            description = "Critical threshold for each individual vms total snapshots size. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeCritical$"
            order = 9
        }
        "-AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_AvoidEmptyCheck$"
            order = 99
        }
        "-CreationTimeCritical" = {
            description = "Critical threshold for each individual vms snapshots, how old they must be in seconds."
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeCritical$"
            order = 7
        }
        "-EmptySnapshotCritical" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical = false
    vars.IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "CreationTimeCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVSnapshot_String_ThresholdInterval$"
        }
        "TotalSnapshotSizeCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeCritical$"
        }
        "TotalSnapshotSizeWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeWarning$"
        }
        "EmptySnapshotCritical" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical$"
        }
        "ActiveVms" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms$"
        }
        "SnapshotSizeWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeWarning$"
        }
        "CountSnapshotWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotWarning$"
        }
        "SnapshotSizeCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeCritical$"
        }
        "CountSnapshotCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotCritical$"
        }
        "ExcludeVms" = {
            value = "$IcingaCheckHyperVSnapshot_Array_ExcludeVms$"
        }
        "IncludeVms" = {
            value = "$IcingaCheckHyperVSnapshot_Array_IncludeVms$"
        }
        "CreationTimeWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeWarning$"
        }
        "SnapshotSizePredictionWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionWarning$"
        }
        "AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_AvoidEmptyCheck$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVSnapshot_Object_Verbosity$"
        }
        "SnapshotSizePredictionCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionCritical$"
        }
    }
    vars.IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms = false
    vars.IcingaCheckHyperVSnapshot_Switchparameter_AvoidEmptyCheck = false
}

object CheckCommand "Invoke-IcingaCheckHyperVOverCommitment" {
    import "PowerShell Base"

    arguments += {
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVOverCommitment_Object_Verbosity$"
            order = 16
        }
        "-RAMOCPercentWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V average RAM overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentWarn$"
            order = 10
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_ActiveVms$"
            order = 99
        }
        "-StorageOCByteCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V Storage overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteCrit$"
            order = 13
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVOverCommitment_Array_IncludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-RAMOCByteCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V RAM overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteCrit$"
            order = 9
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVOverCommitment_Array_ExcludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVOverCommitment' "
            order = 0
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVOverCommitment_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVOverCommitment_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-StorageOCPercentWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V average Storage overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentWarn$"
            order = 14
        }
        "-RAMOCByteWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V RAM overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteWarn$"
            order = 8
        }
        "-StorageOCPercentCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V average Storage overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentCrit$"
            order = 15
        }
        "-StorageOCByteWarn" = {
            description = "Used to specify a WARNING threshold for the Hyper-V Storage overcommitment in Byte."
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteWarn$"
            order = 12
        }
        "-CPUOCPercentWarn" = {
            description = "Warning threshold for Hyper-V average CPU overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentWarn$"
            order = 6
        }
        "-CPUCoreOCWarn" = {
            description = "Warning threshold for Hyper-V CPU Cores overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCWarn$"
            order = 4
        }
        "-CPUOCPercentCrit" = {
            description = "Critical threshold for Hyper-V average CPU overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentCrit$"
            order = 7
        }
        "-CPUCoreOCCrit" = {
            description = "Critical threshold for Hyper-V CPU Cores overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCCrit$"
            order = 5
        }
        "-RAMOCPercentCrit" = {
            description = "Used to specify a CRITICAL threshold for the Hyper-V average RAM overcommitment."
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentCrit$"
            order = 11
        }
    }
    vars.IcingaCheckHyperVOverCommitment_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "RAMOCPercentCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentCrit$"
        }
        "RAMOCByteCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteCrit$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVOverCommitment_String_ThresholdInterval$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_NoPerfData$"
        }
        "RAMOCPercentWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCPercentWarn$"
        }
        "CPUCoreOCWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCWarn$"
        }
        "ActiveVms" = {
            set_if = "$IcingaCheckHyperVOverCommitment_Switchparameter_ActiveVms$"
        }
        "StorageOCByteCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteCrit$"
        }
        "RAMOCByteWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_RAMOCByteWarn$"
        }
        "CPUOCPercentCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentCrit$"
        }
        "StorageOCByteWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCByteWarn$"
        }
        "ExcludeVms" = {
            value = "$IcingaCheckHyperVOverCommitment_Array_ExcludeVms$"
        }
        "IncludeVms" = {
            value = "$IcingaCheckHyperVOverCommitment_Array_IncludeVms$"
        }
        "CPUCoreOCCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUCoreOCCrit$"
        }
        "CPUOCPercentWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_CPUOCPercentWarn$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_Verbosity$"
        }
        "StorageOCPercentCrit" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentCrit$"
        }
        "StorageOCPercentWarn" = {
            value = "$IcingaCheckHyperVOverCommitment_Object_StorageOCPercentWarn$"
        }
    }
    vars.IcingaCheckHyperVOverCommitment_Switchparameter_ActiveVms = false
}

object CheckCommand "Invoke-IcingaCheckHyperVVMHealth" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVVMHealth' "
            order = 0
        }
        "-NegateVMState" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState$"
            order = 99
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVMHealth_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVVMHealth_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVVMHealth_Object_Verbosity$"
            order = 7
        }
        "-CriticalActiveVms" = {
            description = "Allows to monitor on how many active VM's are currently present and throws a warning in case it is within the threshold"
            value = "$IcingaCheckHyperVVMHealth_Object_CriticalActiveVms$"
            order = 5
        }
        "-VmEnabledState" = {
            description = "Critical threshold for the Hyper-V VM current status"
            value = "$IcingaCheckHyperVVMHealth_Object_VmEnabledState$"
            order = 6
        }
        "-SkipVMHeartbeat" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat$"
            order = 99
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData$"
            order = 99
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMHealth_Array_ExcludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-WarningActiveVms" = {
            description = "Allows to monitor on how many active VM's are currently present and throws a warning in case it is within the threshold"
            value = "$IcingaCheckHyperVVMHealth_Object_WarningActiveVms$"
            order = 4
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMHealth_Array_IncludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData = false
    vars.ifw_api_arguments = {
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVVMHealth_String_ThresholdInterval$"
        }
        "ExcludeVms" = {
            value = "$IcingaCheckHyperVVMHealth_Array_ExcludeVms$"
        }
        "ActiveVms" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_ActiveVms$"
        }
        "CriticalActiveVms" = {
            value = "$IcingaCheckHyperVVMHealth_Object_CriticalActiveVms$"
        }
        "NegateVMState" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState$"
        }
        "VmEnabledState" = {
            value = "$IcingaCheckHyperVVMHealth_Object_VmEnabledState$"
        }
        "SkipVMHeartbeat" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVVMHealth_Switchparameter_NoPerfData$"
        }
        "IncludeVms" = {
            value = "$IcingaCheckHyperVVMHealth_Array_IncludeVms$"
        }
        "WarningActiveVms" = {
            value = "$IcingaCheckHyperVVMHealth_Object_WarningActiveVms$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVVMHealth_Object_Verbosity$"
        }
    }
    vars.IcingaCheckHyperVVMHealth_Switchparameter_SkipVMHeartbeat = false
    vars.IcingaCheckHyperVVMHealth_Switchparameter_NegateVMState = false
}

object CheckCommand "Invoke-IcingaCheckHyperVVMM" {
    import "PowerShell Base"

    arguments += {
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; Write-Output 'Error:' $$($$_.Exception.Message)Components:`r`n$$( Get-Module -ListAvailable 'icinga-powershell-*' )`r`n'Module-Path:'`r`n$$($$Env:PSModulePath); exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVVMM' "
            order = 0
        }
        "-Hostname" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVMM_String_Hostname$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "The VMM host to check against"
            value = {{
                var str = macro("$IcingaCheckHyperVVMM_String_Hostname$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 2
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVMM_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVVMM_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVVMM_Object_Verbosity$"
            order = 8
        }
        "-Password" = {
            description = "The password used to authenticate the specified user for the `Username` argument. Empty passwords are not supported."
            value = "(ConvertTo-IcingaSecureString '$IcingaCheckHyperVVMM_Securestring_Password$')"
            order = 4
        }
        "-ExcludeHost" = {
            description = "List of hosts to be excluded from the check output for checking"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMM_Array_ExcludeHost$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 6
        }
        "-AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVVMM_Switchparameter_AvoidEmptyCheck$"
            order = 99
        }
        "-Username" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVVMM_String_Username$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Allows to specify a username to run this check with specific user credentials. This is optional."
            value = {{
                var str = macro("$IcingaCheckHyperVVMM_String_Username$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 3
        }
        "-IncludeHost" = {
            description = "List of hosts to be included within the check output for checking"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMM_Array_IncludeHost$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 5
        }
        "-VMMState" = {
            description = "A list of states which will return `Ok` if being present. States not inside the list will return `Critical`"
            value = {{
                var arr = macro("$IcingaCheckHyperVVMM_Array_VMMState$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 7
        }
    }
    vars.ifw_api_arguments = {
        "AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVVMM_Switchparameter_AvoidEmptyCheck$"
        }
        "ExcludeHost" = {
            value = "$IcingaCheckHyperVVMM_Array_ExcludeHost$"
        }
        "Username" = {
            value = "$IcingaCheckHyperVVMM_String_Username$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVVMM_String_ThresholdInterval$"
        }
        "Hostname" = {
            value = "$IcingaCheckHyperVVMM_String_Hostname$"
        }
        "Password" = {
            value = "$IcingaCheckHyperVVMM_Securestring_Password$"
        }
        "IncludeHost" = {
            value = "$IcingaCheckHyperVVMM_Array_IncludeHost$"
        }
        "VMMState" = {
            value = "$IcingaCheckHyperVVMM_Array_VMMState$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVVMM_Object_Verbosity$"
        }
    }
    vars.IcingaCheckHyperVVMM_Switchparameter_AvoidEmptyCheck = false
}


