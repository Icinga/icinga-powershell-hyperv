object CheckCommand "Invoke-IcingaCheckHyperVSnapshot" {
    import "PowerShell Base"

    arguments += {
        "-SnapshotSizePredictionWarning" = {
            description = "Warning threshold for predicting the size of snapshots taken for each Vm before the partition becomes full."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionWarning$"
            order = 12
        }
        "-SnapshotSizePredictionCritical" = {
            description = "Critical threshold for predicting the size of snapshots taken for each Vm before the partition becomes full."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionCritical$"
            order = 13
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms$"
            order = 99
        }
        "-CountSnapshotCritical" = {
            description = "Critical threshold for each individual vms how many snapshots they may have"
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotCritical$"
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVSnapshot_Array_IncludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 2
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVSnapshot_Array_ExcludeVms$");
                if (len(arr) == 0) {
                    return "@()";
                }
                var psarr = arr.map(
                    x => if (typeof(x) == String) {
                        var argLen = len(x);
                        if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                            x;
                        } else {
                            "'" + x + "'";
                        }
                    } else {
                        x;
                    }
                ).join(",");
                return "@(" + psarr + ")";
            }}
            order = 3
        }
        "-SnapshotSizeCritical" = {
            description = "Critical threshold for each individual vms snapshot size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeCritical$"
            order = 11
        }
        "-SnapshotSizeWarning" = {
            description = "Warning threshold for each individual vms snapshot size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeWarning$"
            order = 10
        }
        "-CreationTimeWarning" = {
            description = "Warning threshold for each individual vms snapshots, how old they must be in seconds."
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeWarning$"
            order = 6
        }
        "-ThresholdInterval" = {
            set_if = {{
                var str = macro("$IcingaCheckHyperVSnapshot_String_ThresholdInterval$"); if (len(str) == 0) { return false; }; return true;
            }}
            description = "Change the value your defined threshold checks against from the current value to a collected time threshold of the Icinga for Windows daemon, as described here: https://icinga.com/docs/icinga-for-windows/latest/doc/service/10-Register-Service-Checks/ An example for this argument would be 1m or 15m which will use the average of 1m or 15m for monitoring."
            value = {{
                var str = macro("$IcingaCheckHyperVSnapshot_String_ThresholdInterval$");
                var argLen = len(str);
                if (argLen == 0) {
                    return;
                }
                if (argLen != 0 && str.substr(0,1) == "'" && str.substr(argLen - 1, argLen) == "'") {
                    return str;
                }
                return ("'" + str + "'");
            }}
            order = 100
        }
        "-CountSnapshotWarning" = {
            description = "Warning threshold for each individual vms how many snapshots they may have."
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotWarning$"
            order = 4
        }
        "-TotalSnapshotSizeWarning" = {
            description = "Warning threshold for each individual vms total snapshots size. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeWarning$"
            order = 8
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state 3: Identical to Verbose 2, but prints in addition the check package configuration e.g (All must be [OK])"
            value = "$IcingaCheckHyperVSnapshot_Object_Verbosity$"
            order = 14
        }
        "-TotalSnapshotSizeCritical" = {
            description = "Critical threshold for each individual vms total snapshots size. It is also possible to enter e.g. 10% as threshold value, if you want a percentage comparison. Defaults to (B)"
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeCritical$"
            order = 9
        }
        "-AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_AvoidEmptyCheck$"
            order = 99
        }
        "-CreationTimeCritical" = {
            description = "Critical threshold for each individual vms snapshots, how old they must be in seconds."
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeCritical$"
            order = 7
        }
        "-EmptySnapshotCritical" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVSnapshot_Switchparameter_AvoidEmptyCheck = false
    vars.ifw_api_arguments = {
        "CreationTimeCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeCritical$"
        }
        "ThresholdInterval" = {
            value = "$IcingaCheckHyperVSnapshot_String_ThresholdInterval$"
        }
        "TotalSnapshotSizeCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeCritical$"
        }
        "TotalSnapshotSizeWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeWarning$"
        }
        "EmptySnapshotCritical" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical$"
        }
        "ActiveVms" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms$"
        }
        "SnapshotSizeWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeWarning$"
        }
        "CountSnapshotWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotWarning$"
        }
        "SnapshotSizeCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeCritical$"
        }
        "CountSnapshotCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotCritical$"
        }
        "ExcludeVms" = {
            value = "$IcingaCheckHyperVSnapshot_Array_ExcludeVms$"
        }
        "IncludeVms" = {
            value = "$IcingaCheckHyperVSnapshot_Array_IncludeVms$"
        }
        "CreationTimeWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeWarning$"
        }
        "SnapshotSizePredictionWarning" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionWarning$"
        }
        "AvoidEmptyCheck" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_AvoidEmptyCheck$"
        }
        "NoPerfData" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData$"
        }
        "Verbosity" = {
            value = "$IcingaCheckHyperVSnapshot_Object_Verbosity$"
        }
        "SnapshotSizePredictionCritical" = {
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionCritical$"
        }
    }
    vars.IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData = false
    vars.IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical = false
    vars.ifw_api_command = "invoke-icingacheckhypervsnapshot"
    vars.IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms = false
}
