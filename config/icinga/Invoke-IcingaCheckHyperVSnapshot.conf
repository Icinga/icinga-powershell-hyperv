object CheckCommand "Invoke-IcingaCheckHyperVSnapshot" {
    import "PowerShell Base"

    arguments += {
        "-SnapshotSizePredictionWarning" = {
            description = "Warning threshold for predicting the size of snapshots taken for each Vm before the partition becomes full."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionWarning$"
            order = 12
        }
        "-SnapshotSizePredictionCritical" = {
            description = "Critical threshold for predicting the size of snapshots taken for each Vm before the partition becomes full."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizePredictionCritical$"
            order = 13
        }
        "-ActiveVms" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms$"
            order = 99
        }
        "-CountSnapshotCritical" = {
            description = "Critical threshold for each individual vms how many snapshots they may have"
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotCritical$"
            order = 5
        }
        "-NoPerfData" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData$"
            order = 99
        }
        "-IncludeVms" = {
            description = "Include only virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVSnapshot_Array_IncludeVms$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 2
        }
        "-C" = {
            value = "try { Use-Icinga -Minimal; } catch { Write-Output 'The Icinga PowerShell Framework is either not installed on the system or not configured properly. Please check https://icinga.com/docs/windows for further details'; exit 3; }; Exit-IcingaExecutePlugin -Command 'Invoke-IcingaCheckHyperVSnapshot' "
            order = 0
        }
        "-ExcludeVms" = {
            description = "Exclude virtual machines with a specific name. Supports wildcard usage (*)"
            value = {{
                var arr = macro("$IcingaCheckHyperVSnapshot_Array_ExcludeVms$");
                    if (len(arr) == 0) {
                        return "@()";
                    }
                    return arr.map(
                        x => if (typeof(x) == String) {
                            var argLen = len(x);
                            if (argLen != 0 && x.substr(0,1) == "'" && x.substr(argLen - 1, argLen) == "'") {
                                x;
                            } else {
                                "'" + x + "'";
                            }
                        } else {
                            x;
                        }
                    ).join(",");
            }}
            order = 3
        }
        "-SnapshotSizeCritical" = {
            description = "Critical threshold for each individual vms snapshot size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeCritical$"
            order = 11
        }
        "-SnapshotSizeWarning" = {
            description = "Warning threshold for each individual vms snapshot size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_SnapshotSizeWarning$"
            order = 10
        }
        "-CreationTimeWarning" = {
            description = "Warning threshold for each individual vms snapshots, how old they must be in seconds."
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeWarning$"
            order = 6
        }
        "-CountSnapshotWarning" = {
            description = "Warning threshold for each individual vms how many snapshots they may have."
            value = "$IcingaCheckHyperVSnapshot_Object_CountSnapshotWarning$"
            order = 4
        }
        "-TotalSnapshotSizeWarning" = {
            description = "Warning threshold for each individual vms total snapshots size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeWarning$"
            order = 8
        }
        "-TotalSnapshotSizeCritical" = {
            description = "Critical threshold for each individual vms total snapshots size in Byte."
            value = "$IcingaCheckHyperVSnapshot_Object_TotalSnapshotSizeCritical$"
            order = 9
        }
        "-Verbosity" = {
            description = "Changes the behavior of the plugin output which check states are printed: 0 (default): Only service checks/packages with state not OK will be printed 1: Only services with not OK will be printed including OK checks of affected check packages including Package config 2: Everything will be printed regardless of the check state"
            value = "$IcingaCheckHyperVSnapshot_Object_Verbosity$"
            order = 14
        }
        "-CreationTimeCritical" = {
            description = "Critical threshold for each individual vms snapshots, how old they must be in seconds."
            value = "$IcingaCheckHyperVSnapshot_Object_CreationTimeCritical$"
            order = 7
        }
        "-EmptySnapshotCritical" = {
            set_if = "$IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical$"
            order = 99
        }
    }
    vars.IcingaCheckHyperVSnapshot_Switchparameter_EmptySnapshotCritical = false
    vars.IcingaCheckHyperVSnapshot_Switchparameter_ActiveVms = false
    vars.IcingaCheckHyperVSnapshot_Switchparameter_NoPerfData = false
}
